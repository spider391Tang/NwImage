!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
CMPOPT	flying_ggi.cpp	/^#define CMPOPT(/;"	d	file:
CMPOPT	flying_ggi.cpp	/^#undef CMPOPT$/;"	d	file:
DEFAULT_CLUSTERSIZE	flying_ggi.cpp	/^#define DEFAULT_CLUSTERSIZE /;"	d	file:
DEFAULT_GENTIME	flying_ggi.cpp	/^#define DEFAULT_GENTIME /;"	d	file:
DEFAULT_HEIGHT	flying_ggi.cpp	/^#define DEFAULT_HEIGHT /;"	d	file:
DEFAULT_MAXSIZE	flying_ggi.cpp	/^#define DEFAULT_MAXSIZE /;"	d	file:
DEFAULT_SPEED	flying_ggi.cpp	/^#define DEFAULT_SPEED /;"	d	file:
DEFAULT_WIDTH	flying_ggi.cpp	/^#define DEFAULT_WIDTH /;"	d	file:
FLYGGI_H	flyggi.h	/^#define FLYGGI_H$/;"	d
Flyggi	flyggi.cpp	/^Flyggi::Flyggi(QObject *parent) :$/;"	f	class:Flyggi	signature:(QObject *parent)
Flyggi	flyggi.h	/^    explicit Flyggi(QObject *parent = 0);$/;"	p	class:Flyggi	access:public	signature:(QObject *parent = 0)
Flyggi	flyggi.h	/^class Flyggi : public QObject$/;"	c	inherits:QObject
Flyggi::Flyggi	flyggi.cpp	/^Flyggi::Flyggi(QObject *parent) :$/;"	f	class:Flyggi	signature:(QObject *parent)
Flyggi::Flyggi	flyggi.h	/^    explicit Flyggi(QObject *parent = 0);$/;"	p	class:Flyggi	access:public	signature:(QObject *parent = 0)
Flyggi::emitFly	flyggi.cpp	/^void Flyggi::emitFly()$/;"	f	class:Flyggi	signature:()
Flyggi::emitFly	flyggi.h	/^    static void emitFly();$/;"	p	class:Flyggi	access:public	signature:()
Flyggi::ggiReady	flyggi.h	/^    void ggiReady( const QString& result);$/;"	p	class:Flyggi	access:public	signature:( const QString& result)
Flyggi::instance	flyggi.h	/^    static Flyggi* instance()$/;"	f	class:Flyggi	access:public	signature:()
Flyggi::m_Instance	flyggi.cpp	/^Flyggi* Flyggi::m_Instance = 0;$/;"	m	class:Flyggi	file:
Flyggi::m_Instance	flyggi.h	/^    static Flyggi* m_Instance;$/;"	m	class:Flyggi	access:private
Flyggi::startFly	flyggi.cpp	/^void Flyggi::startFly()$/;"	f	class:Flyggi	signature:()
Flyggi::startFly	flyggi.h	/^    void startFly();$/;"	p	class:Flyggi	access:public	signature:()
HAVE_RANDOM	flying_ggi.cpp	/^#define HAVE_RANDOM /;"	d	file:
NWIMAGEPROVIDER_H	nwimageprovider.h	/^#define NWIMAGEPROVIDER_H$/;"	d
NwImageProvider	nwimageprovider.cpp	/^NwImageProvider::NwImageProvider()$/;"	f	class:NwImageProvider	signature:()
NwImageProvider	nwimageprovider.h	/^    NwImageProvider();$/;"	p	class:NwImageProvider	access:public	signature:()
NwImageProvider	nwimageprovider.h	/^class NwImageProvider : public QObject, public QQuickImageProvider$/;"	c	inherits:QObject,QQuickImageProvider
NwImageProvider::NwImageProvider	nwimageprovider.cpp	/^NwImageProvider::NwImageProvider()$/;"	f	class:NwImageProvider	signature:()
NwImageProvider::NwImageProvider	nwimageprovider.h	/^    NwImageProvider();$/;"	p	class:NwImageProvider	access:public	signature:()
NwImageProvider::requestImage	nwimageprovider.cpp	/^QImage NwImageProvider::requestImage(const QString &id, QSize *size, const QSize &requestedSize)$/;"	f	class:NwImageProvider	signature:(const QString &id, QSize *size, const QSize &requestedSize)
NwImageProvider::requestImage	nwimageprovider.h	/^    QImage requestImage(const QString &id, QSize *size, const QSize &requestedSize);$/;"	p	class:NwImageProvider	access:public	signature:(const QString &id, QSize *size, const QSize &requestedSize)
NwImageProvider::signalNewFrameReady	nwimageprovider.h	/^    Q_SIGNAL void signalNewFrameReady(int frameNumber);$/;"	p	class:NwImageProvider	access:public	signature:(int frameNumber)
NwImageProvider::slotNewFrameReady	nwimageprovider.cpp	/^void NwImageProvider::slotNewFrameReady()$/;"	f	class:NwImageProvider	signature:()
NwImageProvider::slotNewFrameReady	nwimageprovider.h	/^    void slotNewFrameReady();$/;"	p	class:NwImageProvider	access:public	signature:()
Texture	flying_ggi.cpp	/^} Texture;$/;"	t	typeref:struct:texture	file:
add_texture	flying_ggi.cpp	/^static void add_texture(int x, int y, uint8_t color)$/;"	f	file:	signature:(int x, int y, uint8_t color)
async	flying_ggi.cpp	/^static int async = 1;$/;"	v	file:
banner	banner.inc.c	/^static const char *banner[46] = {$/;"	v	file:
banner_diag	flying_ggi.cpp	/^static int banner_diag;$/;"	v	file:
banner_height	flying_ggi.cpp	/^static int banner_height;$/;"	v	file:
banner_size	flying_ggi.cpp	/^static void banner_size(int *width, int *height)$/;"	f	file:	signature:(int *width, int *height)
banner_width	flying_ggi.cpp	/^static int banner_width;$/;"	v	file:
cluster_size	flying_ggi.cpp	/^static int cluster_size;  \/* pixels *\/$/;"	v	file:
color	flying_ggi.cpp	/^        uint8_t color;$/;"	m	struct:texture	file:	access:public
emitFly	flyggi.cpp	/^void Flyggi::emitFly()$/;"	f	class:Flyggi	signature:()
emitFly	flyggi.h	/^    static void emitFly();$/;"	p	class:Flyggi	access:public	signature:()
fixed	flying_ggi.cpp	/^#define fixed /;"	d	file:
fixed_speed	flying_ggi.cpp	/^static int fixed_speed=0;$/;"	v	file:
free_textures	flying_ggi.cpp	/^static void free_textures(void)$/;"	f	file:	signature:(void)
gen_time	flying_ggi.cpp	/^static int gen_time;	  \/* msec *\/$/;"	v	file:
ggiReady	flyggi.h	/^    void ggiReady( const QString& result);$/;"	p	class:Flyggi	access:public	signature:( const QString& result)
ggi_main	flyggi.cpp	/^extern int ggi_main(int argc, char **argv);$/;"	p	file:	signature:(int argc, char **argv)
ggi_main	flying_ggi.cpp	/^int ggi_main(int argc, char **argv)$/;"	f	signature:(int argc, char **argv)
ggi_main	main.cpp	/^extern int ggi_main(int argc, char **argv);$/;"	p	file:	signature:(int argc, char **argv)
image_buf	flying_ggi.cpp	/^static void *image_buf;$/;"	v	file:
image_size	flying_ggi.cpp	/^static size_t image_size;$/;"	v	file:
init_textures	flying_ggi.cpp	/^static void init_textures(void)$/;"	f	file:	signature:(void)
instance	flyggi.h	/^    static Flyggi* instance()$/;"	f	class:Flyggi	access:public	signature:()
lookup	flying_ggi.cpp	/^static ggi_pixel lookup[256];$/;"	v	file:
m_Instance	flyggi.cpp	/^Flyggi* Flyggi::m_Instance = 0;$/;"	m	class:Flyggi	file:
m_Instance	flyggi.h	/^    static Flyggi* m_Instance;$/;"	m	class:Flyggi	access:private
main	main.cpp	/^int main(int argc, char *argv[])$/;"	f	signature:(int argc, char *argv[])
max_size	flying_ggi.cpp	/^static fixed max_size;    \/* default 1.0 = full screen *\/$/;"	v	file:
mid_x	flying_ggi.cpp	/^        fixed mid_x, mid_y;$/;"	m	struct:texture	file:	access:public
mid_y	flying_ggi.cpp	/^        fixed mid_x, mid_y;$/;"	m	struct:texture	file:	access:public
millis	flying_ggi.cpp	/^        fixed millis;$/;"	m	struct:texture	file:	access:public
random	flying_ggi.cpp	/^# define random	/;"	d	file:
random_in_range	flying_ggi.cpp	/^static int random_in_range(int low, int high)$/;"	f	file:	signature:(int low, int high)
render_texture	flying_ggi.cpp	/^static void render_texture(int width, int height, Texture *t)$/;"	f	file:	signature:(int width, int height, Texture *t)
requestImage	nwimageprovider.cpp	/^QImage NwImageProvider::requestImage(const QString &id, QSize *size, const QSize &requestedSize)$/;"	f	class:NwImageProvider	signature:(const QString &id, QSize *size, const QSize &requestedSize)
requestImage	nwimageprovider.h	/^    QImage requestImage(const QString &id, QSize *size, const QSize &requestedSize);$/;"	p	class:NwImageProvider	access:public	signature:(const QString &id, QSize *size, const QSize &requestedSize)
screen_diag	flying_ggi.cpp	/^static int screen_diag;$/;"	v	file:
screen_height	flying_ggi.cpp	/^static int screen_height;$/;"	v	file:
screen_width	flying_ggi.cpp	/^static int screen_width;$/;"	v	file:
setup_palette	flying_ggi.cpp	/^static void setup_palette(void)$/;"	f	file:	signature:(void)
show_usage	flying_ggi.cpp	/^static void show_usage(char *progname)$/;"	f	file:	signature:(char *progname)
signalNewFrameReady	nwimageprovider.h	/^    Q_SIGNAL void signalNewFrameReady(int frameNumber);$/;"	p	class:NwImageProvider	access:public	signature:(int frameNumber)
size	flying_ggi.cpp	/^        fixed size;$/;"	m	struct:texture	file:	access:public
slotNewFrameReady	nwimageprovider.cpp	/^void NwImageProvider::slotNewFrameReady()$/;"	f	class:NwImageProvider	signature:()
slotNewFrameReady	nwimageprovider.h	/^    void slotNewFrameReady();$/;"	p	class:NwImageProvider	access:public	signature:()
speed	flying_ggi.cpp	/^        fixed speed;$/;"	m	struct:texture	file:	access:public
speed	flying_ggi.cpp	/^static int speed;$/;"	v	file:
startFly	flyggi.cpp	/^void Flyggi::startFly()$/;"	f	class:Flyggi	signature:()
startFly	flyggi.h	/^    void startFly();$/;"	p	class:Flyggi	access:public	signature:()
succ	flying_ggi.cpp	/^        struct texture *succ;$/;"	m	struct:texture	typeref:struct:texture::texture	file:	access:public
tail	flying_ggi.cpp	/^        struct texture *tail;$/;"	m	struct:texture	typeref:struct:texture::texture	file:	access:public
target_str	flying_ggi.cpp	/^static char *target_str = NULL;$/;"	v	file:
texture	flying_ggi.cpp	/^typedef struct texture$/;"	s	file:
texture::color	flying_ggi.cpp	/^        uint8_t color;$/;"	m	struct:texture	file:	access:public
texture::mid_x	flying_ggi.cpp	/^        fixed mid_x, mid_y;$/;"	m	struct:texture	file:	access:public
texture::mid_y	flying_ggi.cpp	/^        fixed mid_x, mid_y;$/;"	m	struct:texture	file:	access:public
texture::millis	flying_ggi.cpp	/^        fixed millis;$/;"	m	struct:texture	file:	access:public
texture::size	flying_ggi.cpp	/^        fixed size;$/;"	m	struct:texture	file:	access:public
texture::speed	flying_ggi.cpp	/^        fixed speed;$/;"	m	struct:texture	file:	access:public
texture::succ	flying_ggi.cpp	/^        struct texture *succ;$/;"	m	struct:texture	typeref:struct:texture::texture	file:	access:public
texture::tail	flying_ggi.cpp	/^        struct texture *tail;$/;"	m	struct:texture	typeref:struct:texture::texture	file:	access:public
texture_list	flying_ggi.cpp	/^static Texture *texture_list;$/;"	v	file:
trans_buffer	flying_ggi.cpp	/^static uint8_t trans_buffer[8192];$/;"	v	file:
translate_hline	flying_ggi.cpp	/^static void translate_hline(int x, int y, int w, uint8_t *data)$/;"	f	file:	signature:(int x, int y, int w, uint8_t *data)
update_all_textures	flying_ggi.cpp	/^static void update_all_textures(int millis)$/;"	f	file:	signature:(int millis)
update_frame	flying_ggi.cpp	/^static void update_frame(void)$/;"	f	file:	signature:(void)
update_texture	flying_ggi.cpp	/^static void update_texture(Texture *t, Texture ***prev_ptr, int millis)$/;"	f	file:	signature:(Texture *t, Texture ***prev_ptr, int millis)
use_putbox	flying_ggi.cpp	/^static int use_putbox;$/;"	v	file:
vis	flying_ggi.cpp	/^static ggi_visual_t vis;$/;"	v	file:
vis_mode	flying_ggi.cpp	/^static ggi_mode vis_mode;$/;"	v	file:
